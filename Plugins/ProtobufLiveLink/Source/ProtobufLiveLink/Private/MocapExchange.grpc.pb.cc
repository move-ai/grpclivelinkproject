// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: MocapExchange.proto

#include "MocapExchange.pb.h"
#include "MocapExchange.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace Mocap {

static const char* MocapServer_method_names[] = {
  "/Mocap.MocapServer/GetEnvironment",
  "/Mocap.MocapServer/GetStructure",
  "/Mocap.MocapServer/GetMocapStream",
};

std::unique_ptr< MocapServer::Stub> MocapServer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MocapServer::Stub> stub(new MocapServer::Stub(channel, options));
  return stub;
}

MocapServer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetEnvironment_(MocapServer_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetStructure_(MocapServer_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMocapStream_(MocapServer_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status MocapServer::Stub::GetEnvironment(::grpc::ClientContext* context, const ::Mocap::EnvironmentRequest& request, ::Mocap::Environment* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Mocap::EnvironmentRequest, ::Mocap::Environment, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetEnvironment_, context, request, response);
}

void MocapServer::Stub::experimental_async::GetEnvironment(::grpc::ClientContext* context, const ::Mocap::EnvironmentRequest* request, ::Mocap::Environment* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Mocap::EnvironmentRequest, ::Mocap::Environment, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetEnvironment_, context, request, response, std::move(f));
}

void MocapServer::Stub::experimental_async::GetEnvironment(::grpc::ClientContext* context, const ::Mocap::EnvironmentRequest* request, ::Mocap::Environment* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetEnvironment_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Mocap::Environment>* MocapServer::Stub::PrepareAsyncGetEnvironmentRaw(::grpc::ClientContext* context, const ::Mocap::EnvironmentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Mocap::Environment, ::Mocap::EnvironmentRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetEnvironment_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Mocap::Environment>* MocapServer::Stub::AsyncGetEnvironmentRaw(::grpc::ClientContext* context, const ::Mocap::EnvironmentRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetEnvironmentRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MocapServer::Stub::GetStructure(::grpc::ClientContext* context, const ::Mocap::StructureRequest& request, ::Mocap::StructureResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Mocap::StructureRequest, ::Mocap::StructureResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetStructure_, context, request, response);
}

void MocapServer::Stub::experimental_async::GetStructure(::grpc::ClientContext* context, const ::Mocap::StructureRequest* request, ::Mocap::StructureResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Mocap::StructureRequest, ::Mocap::StructureResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetStructure_, context, request, response, std::move(f));
}

void MocapServer::Stub::experimental_async::GetStructure(::grpc::ClientContext* context, const ::Mocap::StructureRequest* request, ::Mocap::StructureResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetStructure_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Mocap::StructureResponse>* MocapServer::Stub::PrepareAsyncGetStructureRaw(::grpc::ClientContext* context, const ::Mocap::StructureRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Mocap::StructureResponse, ::Mocap::StructureRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetStructure_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Mocap::StructureResponse>* MocapServer::Stub::AsyncGetStructureRaw(::grpc::ClientContext* context, const ::Mocap::StructureRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetStructureRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::Mocap::MocapStreamResponse>* MocapServer::Stub::GetMocapStreamRaw(::grpc::ClientContext* context, const ::Mocap::MocapStreamRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::Mocap::MocapStreamResponse>::Create(channel_.get(), rpcmethod_GetMocapStream_, context, request);
}

void MocapServer::Stub::experimental_async::GetMocapStream(::grpc::ClientContext* context, const ::Mocap::MocapStreamRequest* request, ::grpc::experimental::ClientReadReactor< ::Mocap::MocapStreamResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::Mocap::MocapStreamResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_GetMocapStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::Mocap::MocapStreamResponse>* MocapServer::Stub::AsyncGetMocapStreamRaw(::grpc::ClientContext* context, const ::Mocap::MocapStreamRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::Mocap::MocapStreamResponse>::Create(channel_.get(), cq, rpcmethod_GetMocapStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::Mocap::MocapStreamResponse>* MocapServer::Stub::PrepareAsyncGetMocapStreamRaw(::grpc::ClientContext* context, const ::Mocap::MocapStreamRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::Mocap::MocapStreamResponse>::Create(channel_.get(), cq, rpcmethod_GetMocapStream_, context, request, false, nullptr);
}

MocapServer::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MocapServer_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MocapServer::Service, ::Mocap::EnvironmentRequest, ::Mocap::Environment, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MocapServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Mocap::EnvironmentRequest* req,
             ::Mocap::Environment* resp) {
               return service->GetEnvironment(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MocapServer_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MocapServer::Service, ::Mocap::StructureRequest, ::Mocap::StructureResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MocapServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Mocap::StructureRequest* req,
             ::Mocap::StructureResponse* resp) {
               return service->GetStructure(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MocapServer_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< MocapServer::Service, ::Mocap::MocapStreamRequest, ::Mocap::MocapStreamResponse>(
          [](MocapServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Mocap::MocapStreamRequest* req,
             ::grpc::ServerWriter<::Mocap::MocapStreamResponse>* writer) {
               return service->GetMocapStream(ctx, req, writer);
             }, this)));
}

MocapServer::Service::~Service() {
}

::grpc::Status MocapServer::Service::GetEnvironment(::grpc::ServerContext* context, const ::Mocap::EnvironmentRequest* request, ::Mocap::Environment* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MocapServer::Service::GetStructure(::grpc::ServerContext* context, const ::Mocap::StructureRequest* request, ::Mocap::StructureResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MocapServer::Service::GetMocapStream(::grpc::ServerContext* context, const ::Mocap::MocapStreamRequest* request, ::grpc::ServerWriter< ::Mocap::MocapStreamResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace Mocap

