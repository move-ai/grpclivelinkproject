// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MocapExchange.proto

#include "MocapExchange.pb.h"

#include <algorithm>
THIRD_PARTY_INCLUDES_START
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
THIRD_PARTY_INCLUDES_END

PROTOBUF_PRAGMA_INIT_SEG
namespace Mocap {
constexpr Environment::Environment(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : gravity_(0)
  , distunits_(0)

  , timeunits_(0)

  , directiontype_(0)
{}
struct EnvironmentDefaultTypeInternal {
  constexpr EnvironmentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EnvironmentDefaultTypeInternal() {}
  union {
    Environment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EnvironmentDefaultTypeInternal _Environment_default_instance_;
constexpr Translation::Translation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0)
  , z_(0){}
struct TranslationDefaultTypeInternal {
  constexpr TranslationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TranslationDefaultTypeInternal() {}
  union {
    Translation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TranslationDefaultTypeInternal _Translation_default_instance_;
constexpr Orientation::Orientation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rotationvalues_()
  , rotationtype_(0)
{}
struct OrientationDefaultTypeInternal {
  constexpr OrientationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OrientationDefaultTypeInternal() {}
  union {
    Orientation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OrientationDefaultTypeInternal _Orientation_default_instance_;
constexpr Transform::Transform(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : translation_(nullptr)
  , orientation_(nullptr){}
struct TransformDefaultTypeInternal {
  constexpr TransformDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransformDefaultTypeInternal() {}
  union {
    Transform _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransformDefaultTypeInternal _Transform_default_instance_;
constexpr Link::Link(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : linksize_()
  , inertialmatrix_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , offset_(nullptr)
  , linkid_(0u)
  , parentlinkid_(0)
  , mass_(0){}
struct LinkDefaultTypeInternal {
  constexpr LinkDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LinkDefaultTypeInternal() {}
  union {
    Link _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LinkDefaultTypeInternal _Link_default_instance_;
constexpr JointMeta::JointMeta(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , jointid_(0u)
  , linkid_(0u){}
struct JointMetaDefaultTypeInternal {
  constexpr JointMetaDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~JointMetaDefaultTypeInternal() {}
  union {
    JointMeta _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT JointMetaDefaultTypeInternal _JointMeta_default_instance_;
constexpr Structure::Structure(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : links_()
  , joints_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , structureid_(0u)
  , structuretype_(0)
{}
struct StructureDefaultTypeInternal {
  constexpr StructureDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StructureDefaultTypeInternal() {}
  union {
    Structure _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StructureDefaultTypeInternal _Structure_default_instance_;
constexpr Joint::Joint(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transform_(nullptr)
  , jointid_(0u){}
struct JointDefaultTypeInternal {
  constexpr JointDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~JointDefaultTypeInternal() {}
  union {
    Joint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT JointDefaultTypeInternal _Joint_default_instance_;
constexpr Pose::Pose(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : joints_()
  , timestamp_(uint64_t{0u})
  , subjectid_(0u){}
struct PoseDefaultTypeInternal {
  constexpr PoseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PoseDefaultTypeInternal() {}
  union {
    Pose _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PoseDefaultTypeInternal _Pose_default_instance_;
constexpr EnvironmentRequest::EnvironmentRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct EnvironmentRequestDefaultTypeInternal {
  constexpr EnvironmentRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EnvironmentRequestDefaultTypeInternal() {}
  union {
    EnvironmentRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EnvironmentRequestDefaultTypeInternal _EnvironmentRequest_default_instance_;
constexpr MocapStreamRequest::MocapStreamRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fps_(0){}
struct MocapStreamRequestDefaultTypeInternal {
  constexpr MocapStreamRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MocapStreamRequestDefaultTypeInternal() {}
  union {
    MocapStreamRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MocapStreamRequestDefaultTypeInternal _MocapStreamRequest_default_instance_;
constexpr MocapStreamResponse::MocapStreamResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : poses_()
  , servertime_(0){}
struct MocapStreamResponseDefaultTypeInternal {
  constexpr MocapStreamResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MocapStreamResponseDefaultTypeInternal() {}
  union {
    MocapStreamResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MocapStreamResponseDefaultTypeInternal _MocapStreamResponse_default_instance_;
constexpr StructureRequest::StructureRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : structureid_()
  , _structureid_cached_byte_size_(0){}
struct StructureRequestDefaultTypeInternal {
  constexpr StructureRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StructureRequestDefaultTypeInternal() {}
  union {
    StructureRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StructureRequestDefaultTypeInternal _StructureRequest_default_instance_;
constexpr StructureResponse::StructureResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : structures_(){}
struct StructureResponseDefaultTypeInternal {
  constexpr StructureResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StructureResponseDefaultTypeInternal() {}
  union {
    StructureResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StructureResponseDefaultTypeInternal _StructureResponse_default_instance_;
}  // namespace Mocap
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_MocapExchange_2eproto[14];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_MocapExchange_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_MocapExchange_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_MocapExchange_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Mocap::Environment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Mocap::Environment, gravity_),
  PROTOBUF_FIELD_OFFSET(::Mocap::Environment, distunits_),
  PROTOBUF_FIELD_OFFSET(::Mocap::Environment, timeunits_),
  PROTOBUF_FIELD_OFFSET(::Mocap::Environment, directiontype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Mocap::Translation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Mocap::Translation, x_),
  PROTOBUF_FIELD_OFFSET(::Mocap::Translation, y_),
  PROTOBUF_FIELD_OFFSET(::Mocap::Translation, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Mocap::Orientation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Mocap::Orientation, rotationtype_),
  PROTOBUF_FIELD_OFFSET(::Mocap::Orientation, rotationvalues_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Mocap::Transform, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Mocap::Transform, translation_),
  PROTOBUF_FIELD_OFFSET(::Mocap::Transform, orientation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Mocap::Link, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Mocap::Link, name_),
  PROTOBUF_FIELD_OFFSET(::Mocap::Link, linkid_),
  PROTOBUF_FIELD_OFFSET(::Mocap::Link, parentlinkid_),
  PROTOBUF_FIELD_OFFSET(::Mocap::Link, offset_),
  PROTOBUF_FIELD_OFFSET(::Mocap::Link, mass_),
  PROTOBUF_FIELD_OFFSET(::Mocap::Link, linksize_),
  PROTOBUF_FIELD_OFFSET(::Mocap::Link, inertialmatrix_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Mocap::JointMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Mocap::JointMeta, jointid_),
  PROTOBUF_FIELD_OFFSET(::Mocap::JointMeta, linkid_),
  PROTOBUF_FIELD_OFFSET(::Mocap::JointMeta, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Mocap::Structure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Mocap::Structure, structureid_),
  PROTOBUF_FIELD_OFFSET(::Mocap::Structure, structuretype_),
  PROTOBUF_FIELD_OFFSET(::Mocap::Structure, name_),
  PROTOBUF_FIELD_OFFSET(::Mocap::Structure, links_),
  PROTOBUF_FIELD_OFFSET(::Mocap::Structure, joints_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Mocap::Joint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Mocap::Joint, jointid_),
  PROTOBUF_FIELD_OFFSET(::Mocap::Joint, transform_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Mocap::Pose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Mocap::Pose, subjectid_),
  PROTOBUF_FIELD_OFFSET(::Mocap::Pose, timestamp_),
  PROTOBUF_FIELD_OFFSET(::Mocap::Pose, joints_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Mocap::EnvironmentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Mocap::MocapStreamRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Mocap::MocapStreamRequest, fps_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Mocap::MocapStreamResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Mocap::MocapStreamResponse, poses_),
  PROTOBUF_FIELD_OFFSET(::Mocap::MocapStreamResponse, servertime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Mocap::StructureRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Mocap::StructureRequest, structureid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Mocap::StructureResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Mocap::StructureResponse, structures_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Mocap::Environment)},
  { 9, -1, sizeof(::Mocap::Translation)},
  { 17, -1, sizeof(::Mocap::Orientation)},
  { 24, -1, sizeof(::Mocap::Transform)},
  { 31, -1, sizeof(::Mocap::Link)},
  { 43, -1, sizeof(::Mocap::JointMeta)},
  { 51, -1, sizeof(::Mocap::Structure)},
  { 61, -1, sizeof(::Mocap::Joint)},
  { 68, -1, sizeof(::Mocap::Pose)},
  { 76, -1, sizeof(::Mocap::EnvironmentRequest)},
  { 81, -1, sizeof(::Mocap::MocapStreamRequest)},
  { 87, -1, sizeof(::Mocap::MocapStreamResponse)},
  { 94, -1, sizeof(::Mocap::StructureRequest)},
  { 100, -1, sizeof(::Mocap::StructureResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Mocap::_Environment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Mocap::_Translation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Mocap::_Orientation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Mocap::_Transform_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Mocap::_Link_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Mocap::_JointMeta_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Mocap::_Structure_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Mocap::_Joint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Mocap::_Pose_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Mocap::_EnvironmentRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Mocap::_MocapStreamRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Mocap::_MocapStreamResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Mocap::_StructureRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Mocap::_StructureResponse_default_instance_),
};

const char descriptor_table_protodef_MocapExchange_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023MocapExchange.proto\022\005Mocap\"\277\002\n\013Environ"
  "ment\022\017\n\007gravity\030\001 \001(\002\0223\n\tdistUnits\030\002 \001(\016"
  "2 .Mocap.Environment.DistanceUnits\022/\n\tti"
  "meUnits\030\003 \001(\0162\034.Mocap.Environment.TimeUn"
  "its\0227\n\rdirectionType\030\004 \001(\0162 .Mocap.Envir"
  "onment.DirectionType\".\n\rDirectionType\022\r\n"
  "\tLEFT_HAND\020\000\022\016\n\nRIGHT_HAND\020\001\"&\n\rDistance"
  "Units\022\006\n\002MM\020\000\022\006\n\002CM\020\001\022\005\n\001M\020\002\"(\n\tTimeUnit"
  "s\022\007\n\003SEC\020\000\022\010\n\004MILS\020\001\022\010\n\004NSEC\020\002\".\n\013Transl"
  "ation\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"\343"
  "\001\n\013Orientation\0225\n\014rotationType\030\001 \001(\0162\037.M"
  "ocap.Orientation.RotationType\022\026\n\016rotatio"
  "nValues\030\002 \003(\002\"\204\001\n\014RotationType\022\016\n\nQUATER"
  "NION\020\000\022\n\n\006MATRIX\020\001\022\r\n\tEULER_XYZ\020\002\022\r\n\tEUL"
  "ER_XZY\020\003\022\r\n\tEULER_YXZ\020\004\022\r\n\tEULER_YZX\020\005\022\r"
  "\n\tEULER_ZXY\020\006\022\r\n\tEULER_ZYX\020\007\"]\n\tTransfor"
  "m\022\'\n\013translation\030\001 \001(\0132\022.Mocap.Translati"
  "on\022\'\n\013orientation\030\002 \001(\0132\022.Mocap.Orientat"
  "ion\"\224\001\n\004Link\022\014\n\004name\030\001 \001(\t\022\016\n\006linkId\030\002 \001"
  "(\r\022\024\n\014parentLinkId\030\003 \001(\005\022 \n\006offset\030\004 \001(\013"
  "2\020.Mocap.Transform\022\014\n\004mass\030\005 \001(\002\022\020\n\010link"
  "Size\030\006 \003(\002\022\026\n\016inertialMatrix\030\007 \003(\002\":\n\tJo"
  "intMeta\022\017\n\007jointId\030\001 \001(\r\022\016\n\006linkId\030\002 \001(\r"
  "\022\014\n\004name\030\003 \001(\t\"\231\001\n\tStructure\022\023\n\013structur"
  "eId\030\001 \001(\r\022+\n\rstructureType\030\002 \001(\0162\024.Mocap"
  ".StructureType\022\014\n\004name\030\003 \001(\t\022\032\n\005links\030\004 "
  "\003(\0132\013.Mocap.Link\022 \n\006joints\030\005 \003(\0132\020.Mocap"
  ".JointMeta\"=\n\005Joint\022\017\n\007jointId\030\001 \001(\r\022#\n\t"
  "transform\030\002 \001(\0132\020.Mocap.Transform\"J\n\004Pos"
  "e\022\021\n\tsubjectId\030\001 \001(\r\022\021\n\ttimestamp\030\002 \001(\004\022"
  "\034\n\006joints\030\003 \003(\0132\014.Mocap.Joint\"\024\n\022Environ"
  "mentRequest\"!\n\022MocapStreamRequest\022\013\n\003fps"
  "\030\001 \001(\002\"E\n\023MocapStreamResponse\022\032\n\005poses\030\001"
  " \003(\0132\013.Mocap.Pose\022\022\n\nserverTime\030\002 \001(\002\"\'\n"
  "\020StructureRequest\022\023\n\013structureId\030\001 \003(\r\"9"
  "\n\021StructureResponse\022$\n\nstructures\030\001 \003(\0132"
  "\020.Mocap.Structure*.\n\rStructureType\022\t\n\005HU"
  "MAN\020\000\022\010\n\004BALL\020\001\022\010\n\004BIKE\020\0022\342\001\n\013MocapServe"
  "r\022A\n\016GetEnvironment\022\031.Mocap.EnvironmentR"
  "equest\032\022.Mocap.Environment\"\000\022C\n\014GetStruc"
  "ture\022\027.Mocap.StructureRequest\032\030.Mocap.St"
  "ructureResponse\"\000\022K\n\016GetMocapStream\022\031.Mo"
  "cap.MocapStreamRequest\032\032.Mocap.MocapStre"
  "amResponse\"\0000\001b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_MocapExchange_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MocapExchange_2eproto = {
  false, false, 1742, descriptor_table_protodef_MocapExchange_2eproto, "MocapExchange.proto", 
  &descriptor_table_MocapExchange_2eproto_once, nullptr, 0, 14,
  schemas, file_default_instances, TableStruct_MocapExchange_2eproto::offsets,
  file_level_metadata_MocapExchange_2eproto, file_level_enum_descriptors_MocapExchange_2eproto, file_level_service_descriptors_MocapExchange_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_MocapExchange_2eproto_getter() {
  return &descriptor_table_MocapExchange_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_MocapExchange_2eproto(&descriptor_table_MocapExchange_2eproto);
namespace Mocap {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Environment_DirectionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_MocapExchange_2eproto);
  return file_level_enum_descriptors_MocapExchange_2eproto[0];
}
bool Environment_DirectionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Environment_DirectionType Environment::LEFT_HAND;
constexpr Environment_DirectionType Environment::RIGHT_HAND;
constexpr Environment_DirectionType Environment::DirectionType_MIN;
constexpr Environment_DirectionType Environment::DirectionType_MAX;
constexpr int Environment::DirectionType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Environment_DistanceUnits_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_MocapExchange_2eproto);
  return file_level_enum_descriptors_MocapExchange_2eproto[1];
}
bool Environment_DistanceUnits_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Environment_DistanceUnits Environment::MM;
constexpr Environment_DistanceUnits Environment::CM;
constexpr Environment_DistanceUnits Environment::M;
constexpr Environment_DistanceUnits Environment::DistanceUnits_MIN;
constexpr Environment_DistanceUnits Environment::DistanceUnits_MAX;
constexpr int Environment::DistanceUnits_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Environment_TimeUnits_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_MocapExchange_2eproto);
  return file_level_enum_descriptors_MocapExchange_2eproto[2];
}
bool Environment_TimeUnits_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Environment_TimeUnits Environment::SEC;
constexpr Environment_TimeUnits Environment::MILS;
constexpr Environment_TimeUnits Environment::NSEC;
constexpr Environment_TimeUnits Environment::TimeUnits_MIN;
constexpr Environment_TimeUnits Environment::TimeUnits_MAX;
constexpr int Environment::TimeUnits_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Orientation_RotationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_MocapExchange_2eproto);
  return file_level_enum_descriptors_MocapExchange_2eproto[3];
}
bool Orientation_RotationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Orientation_RotationType Orientation::QUATERNION;
constexpr Orientation_RotationType Orientation::MATRIX;
constexpr Orientation_RotationType Orientation::EULER_XYZ;
constexpr Orientation_RotationType Orientation::EULER_XZY;
constexpr Orientation_RotationType Orientation::EULER_YXZ;
constexpr Orientation_RotationType Orientation::EULER_YZX;
constexpr Orientation_RotationType Orientation::EULER_ZXY;
constexpr Orientation_RotationType Orientation::EULER_ZYX;
constexpr Orientation_RotationType Orientation::RotationType_MIN;
constexpr Orientation_RotationType Orientation::RotationType_MAX;
constexpr int Orientation::RotationType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StructureType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_MocapExchange_2eproto);
  return file_level_enum_descriptors_MocapExchange_2eproto[4];
}
bool StructureType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Environment::_Internal {
 public:
};

Environment::Environment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Mocap.Environment)
}
Environment::Environment(const Environment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&gravity_, &from.gravity_,
    static_cast<size_t>(reinterpret_cast<char*>(&directiontype_) -
    reinterpret_cast<char*>(&gravity_)) + sizeof(directiontype_));
  // @@protoc_insertion_point(copy_constructor:Mocap.Environment)
}

inline void Environment::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&gravity_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&directiontype_) -
    reinterpret_cast<char*>(&gravity_)) + sizeof(directiontype_));
}

Environment::~Environment() {
  // @@protoc_insertion_point(destructor:Mocap.Environment)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Environment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Environment::ArenaDtor(void* object) {
  Environment* _this = reinterpret_cast< Environment* >(object);
  (void)_this;
}
void Environment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Environment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Environment::Clear() {
// @@protoc_insertion_point(message_clear_start:Mocap.Environment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&gravity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&directiontype_) -
      reinterpret_cast<char*>(&gravity_)) + sizeof(directiontype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Environment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float gravity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          gravity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .Mocap.Environment.DistanceUnits distUnits = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_distunits(static_cast<::Mocap::Environment_DistanceUnits>(val));
        } else goto handle_unusual;
        continue;
      // .Mocap.Environment.TimeUnits timeUnits = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_timeunits(static_cast<::Mocap::Environment_TimeUnits>(val));
        } else goto handle_unusual;
        continue;
      // .Mocap.Environment.DirectionType directionType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_directiontype(static_cast<::Mocap::Environment_DirectionType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Environment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mocap.Environment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float gravity = 1;
  if (!(this->_internal_gravity() <= 0 && this->_internal_gravity() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_gravity(), target);
  }

  // .Mocap.Environment.DistanceUnits distUnits = 2;
  if (this->_internal_distunits() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_distunits(), target);
  }

  // .Mocap.Environment.TimeUnits timeUnits = 3;
  if (this->_internal_timeunits() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_timeunits(), target);
  }

  // .Mocap.Environment.DirectionType directionType = 4;
  if (this->_internal_directiontype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_directiontype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mocap.Environment)
  return target;
}

size_t Environment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mocap.Environment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float gravity = 1;
  if (!(this->_internal_gravity() <= 0 && this->_internal_gravity() >= 0)) {
    total_size += 1 + 4;
  }

  // .Mocap.Environment.DistanceUnits distUnits = 2;
  if (this->_internal_distunits() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_distunits());
  }

  // .Mocap.Environment.TimeUnits timeUnits = 3;
  if (this->_internal_timeunits() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_timeunits());
  }

  // .Mocap.Environment.DirectionType directionType = 4;
  if (this->_internal_directiontype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_directiontype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Environment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Environment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Environment::GetClassData() const { return &_class_data_; }

void Environment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Environment *>(to)->MergeFrom(
      static_cast<const Environment &>(from));
}


void Environment::MergeFrom(const Environment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mocap.Environment)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_gravity() <= 0 && from._internal_gravity() >= 0)) {
    _internal_set_gravity(from._internal_gravity());
  }
  if (from._internal_distunits() != 0) {
    _internal_set_distunits(from._internal_distunits());
  }
  if (from._internal_timeunits() != 0) {
    _internal_set_timeunits(from._internal_timeunits());
  }
  if (from._internal_directiontype() != 0) {
    _internal_set_directiontype(from._internal_directiontype());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Environment::CopyFrom(const Environment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mocap.Environment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Environment::IsInitialized() const {
  return true;
}

void Environment::InternalSwap(Environment* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Environment, directiontype_)
      + sizeof(Environment::directiontype_)
      - PROTOBUF_FIELD_OFFSET(Environment, gravity_)>(
          reinterpret_cast<char*>(&gravity_),
          reinterpret_cast<char*>(&other->gravity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Environment::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_MocapExchange_2eproto_getter, &descriptor_table_MocapExchange_2eproto_once,
      file_level_metadata_MocapExchange_2eproto[0]);
}

// ===================================================================

class Translation::_Internal {
 public:
};

Translation::Translation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Mocap.Translation)
}
Translation::Translation(const Translation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:Mocap.Translation)
}

inline void Translation::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Translation::~Translation() {
  // @@protoc_insertion_point(destructor:Mocap.Translation)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Translation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Translation::ArenaDtor(void* object) {
  Translation* _this = reinterpret_cast< Translation* >(object);
  (void)_this;
}
void Translation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Translation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Translation::Clear() {
// @@protoc_insertion_point(message_clear_start:Mocap.Translation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Translation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Translation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mocap.Translation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->_internal_x() <= 0 && this->_internal_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->_internal_y() <= 0 && this->_internal_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  if (!(this->_internal_z() <= 0 && this->_internal_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mocap.Translation)
  return target;
}

size_t Translation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mocap.Translation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->_internal_x() <= 0 && this->_internal_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->_internal_y() <= 0 && this->_internal_y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (!(this->_internal_z() <= 0 && this->_internal_z() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Translation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Translation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Translation::GetClassData() const { return &_class_data_; }

void Translation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Translation *>(to)->MergeFrom(
      static_cast<const Translation &>(from));
}


void Translation::MergeFrom(const Translation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mocap.Translation)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_x() <= 0 && from._internal_x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from._internal_y() <= 0 && from._internal_y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from._internal_z() <= 0 && from._internal_z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Translation::CopyFrom(const Translation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mocap.Translation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Translation::IsInitialized() const {
  return true;
}

void Translation::InternalSwap(Translation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Translation, z_)
      + sizeof(Translation::z_)
      - PROTOBUF_FIELD_OFFSET(Translation, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Translation::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_MocapExchange_2eproto_getter, &descriptor_table_MocapExchange_2eproto_once,
      file_level_metadata_MocapExchange_2eproto[1]);
}

// ===================================================================

class Orientation::_Internal {
 public:
};

Orientation::Orientation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  rotationvalues_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Mocap.Orientation)
}
Orientation::Orientation(const Orientation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      rotationvalues_(from.rotationvalues_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rotationtype_ = from.rotationtype_;
  // @@protoc_insertion_point(copy_constructor:Mocap.Orientation)
}

inline void Orientation::SharedCtor() {
rotationtype_ = 0;
}

Orientation::~Orientation() {
  // @@protoc_insertion_point(destructor:Mocap.Orientation)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Orientation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Orientation::ArenaDtor(void* object) {
  Orientation* _this = reinterpret_cast< Orientation* >(object);
  (void)_this;
}
void Orientation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Orientation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Orientation::Clear() {
// @@protoc_insertion_point(message_clear_start:Mocap.Orientation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rotationvalues_.Clear();
  rotationtype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Orientation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Mocap.Orientation.RotationType rotationType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_rotationtype(static_cast<::Mocap::Orientation_RotationType>(val));
        } else goto handle_unusual;
        continue;
      // repeated float rotationValues = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_rotationvalues(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_rotationvalues(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Orientation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mocap.Orientation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Mocap.Orientation.RotationType rotationType = 1;
  if (this->_internal_rotationtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_rotationtype(), target);
  }

  // repeated float rotationValues = 2;
  if (this->_internal_rotationvalues_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_rotationvalues(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mocap.Orientation)
  return target;
}

size_t Orientation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mocap.Orientation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float rotationValues = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_rotationvalues_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // .Mocap.Orientation.RotationType rotationType = 1;
  if (this->_internal_rotationtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_rotationtype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Orientation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Orientation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Orientation::GetClassData() const { return &_class_data_; }

void Orientation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Orientation *>(to)->MergeFrom(
      static_cast<const Orientation &>(from));
}


void Orientation::MergeFrom(const Orientation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mocap.Orientation)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rotationvalues_.MergeFrom(from.rotationvalues_);
  if (from._internal_rotationtype() != 0) {
    _internal_set_rotationtype(from._internal_rotationtype());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Orientation::CopyFrom(const Orientation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mocap.Orientation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Orientation::IsInitialized() const {
  return true;
}

void Orientation::InternalSwap(Orientation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  rotationvalues_.InternalSwap(&other->rotationvalues_);
  swap(rotationtype_, other->rotationtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Orientation::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_MocapExchange_2eproto_getter, &descriptor_table_MocapExchange_2eproto_once,
      file_level_metadata_MocapExchange_2eproto[2]);
}

// ===================================================================

class Transform::_Internal {
 public:
  static const ::Mocap::Translation& translation(const Transform* msg);
  static const ::Mocap::Orientation& orientation(const Transform* msg);
};

const ::Mocap::Translation&
Transform::_Internal::translation(const Transform* msg) {
  return *msg->translation_;
}
const ::Mocap::Orientation&
Transform::_Internal::orientation(const Transform* msg) {
  return *msg->orientation_;
}
Transform::Transform(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Mocap.Transform)
}
Transform::Transform(const Transform& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_translation()) {
    translation_ = new ::Mocap::Translation(*from.translation_);
  } else {
    translation_ = nullptr;
  }
  if (from._internal_has_orientation()) {
    orientation_ = new ::Mocap::Orientation(*from.orientation_);
  } else {
    orientation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Mocap.Transform)
}

inline void Transform::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&translation_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&orientation_) -
    reinterpret_cast<char*>(&translation_)) + sizeof(orientation_));
}

Transform::~Transform() {
  // @@protoc_insertion_point(destructor:Mocap.Transform)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Transform::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete translation_;
  if (this != internal_default_instance()) delete orientation_;
}

void Transform::ArenaDtor(void* object) {
  Transform* _this = reinterpret_cast< Transform* >(object);
  (void)_this;
}
void Transform::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transform::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Transform::Clear() {
// @@protoc_insertion_point(message_clear_start:Mocap.Transform)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && translation_ != nullptr) {
    delete translation_;
  }
  translation_ = nullptr;
  if (GetArenaForAllocation() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transform::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Mocap.Translation translation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_translation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Mocap.Orientation orientation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_orientation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Transform::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mocap.Transform)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Mocap.Translation translation = 1;
  if (this->_internal_has_translation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::translation(this), target, stream);
  }

  // .Mocap.Orientation orientation = 2;
  if (this->_internal_has_orientation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::orientation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mocap.Transform)
  return target;
}

size_t Transform::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mocap.Transform)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Mocap.Translation translation = 1;
  if (this->_internal_has_translation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *translation_);
  }

  // .Mocap.Orientation orientation = 2;
  if (this->_internal_has_orientation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *orientation_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Transform::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Transform::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Transform::GetClassData() const { return &_class_data_; }

void Transform::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Transform *>(to)->MergeFrom(
      static_cast<const Transform &>(from));
}


void Transform::MergeFrom(const Transform& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mocap.Transform)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_translation()) {
    _internal_mutable_translation()->::Mocap::Translation::MergeFrom(from._internal_translation());
  }
  if (from._internal_has_orientation()) {
    _internal_mutable_orientation()->::Mocap::Orientation::MergeFrom(from._internal_orientation());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Transform::CopyFrom(const Transform& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mocap.Transform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transform::IsInitialized() const {
  return true;
}

void Transform::InternalSwap(Transform* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Transform, orientation_)
      + sizeof(Transform::orientation_)
      - PROTOBUF_FIELD_OFFSET(Transform, translation_)>(
          reinterpret_cast<char*>(&translation_),
          reinterpret_cast<char*>(&other->translation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Transform::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_MocapExchange_2eproto_getter, &descriptor_table_MocapExchange_2eproto_once,
      file_level_metadata_MocapExchange_2eproto[3]);
}

// ===================================================================

class Link::_Internal {
 public:
  static const ::Mocap::Transform& offset(const Link* msg);
};

const ::Mocap::Transform&
Link::_Internal::offset(const Link* msg) {
  return *msg->offset_;
}
Link::Link(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  linksize_(arena),
  inertialmatrix_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Mocap.Link)
}
Link::Link(const Link& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      linksize_(from.linksize_),
      inertialmatrix_(from.inertialmatrix_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_offset()) {
    offset_ = new ::Mocap::Transform(*from.offset_);
  } else {
    offset_ = nullptr;
  }
  ::memcpy(&linkid_, &from.linkid_,
    static_cast<size_t>(reinterpret_cast<char*>(&mass_) -
    reinterpret_cast<char*>(&linkid_)) + sizeof(mass_));
  // @@protoc_insertion_point(copy_constructor:Mocap.Link)
}

inline void Link::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&offset_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&mass_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(mass_));
}

Link::~Link() {
  // @@protoc_insertion_point(destructor:Mocap.Link)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Link::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete offset_;
}

void Link::ArenaDtor(void* object) {
  Link* _this = reinterpret_cast< Link* >(object);
  (void)_this;
}
void Link::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Link::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Link::Clear() {
// @@protoc_insertion_point(message_clear_start:Mocap.Link)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  linksize_.Clear();
  inertialmatrix_.Clear();
  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && offset_ != nullptr) {
    delete offset_;
  }
  offset_ = nullptr;
  ::memset(&linkid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mass_) -
      reinterpret_cast<char*>(&linkid_)) + sizeof(mass_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Link::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Mocap.Link.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 linkId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          linkid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 parentLinkId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          parentlinkid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Mocap.Transform offset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_offset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float mass = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          mass_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float linkSize = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_linksize(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53) {
          _internal_add_linksize(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float inertialMatrix = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_inertialmatrix(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61) {
          _internal_add_inertialmatrix(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Link::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mocap.Link)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Mocap.Link.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // uint32 linkId = 2;
  if (this->_internal_linkid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_linkid(), target);
  }

  // int32 parentLinkId = 3;
  if (this->_internal_parentlinkid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_parentlinkid(), target);
  }

  // .Mocap.Transform offset = 4;
  if (this->_internal_has_offset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::offset(this), target, stream);
  }

  // float mass = 5;
  if (!(this->_internal_mass() <= 0 && this->_internal_mass() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_mass(), target);
  }

  // repeated float linkSize = 6;
  if (this->_internal_linksize_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_linksize(), target);
  }

  // repeated float inertialMatrix = 7;
  if (this->_internal_inertialmatrix_size() > 0) {
    target = stream->WriteFixedPacked(7, _internal_inertialmatrix(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mocap.Link)
  return target;
}

size_t Link::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mocap.Link)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float linkSize = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_linksize_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated float inertialMatrix = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_inertialmatrix_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .Mocap.Transform offset = 4;
  if (this->_internal_has_offset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *offset_);
  }

  // uint32 linkId = 2;
  if (this->_internal_linkid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_linkid());
  }

  // int32 parentLinkId = 3;
  if (this->_internal_parentlinkid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_parentlinkid());
  }

  // float mass = 5;
  if (!(this->_internal_mass() <= 0 && this->_internal_mass() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Link::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Link::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Link::GetClassData() const { return &_class_data_; }

void Link::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Link *>(to)->MergeFrom(
      static_cast<const Link &>(from));
}


void Link::MergeFrom(const Link& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mocap.Link)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  linksize_.MergeFrom(from.linksize_);
  inertialmatrix_.MergeFrom(from.inertialmatrix_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_offset()) {
    _internal_mutable_offset()->::Mocap::Transform::MergeFrom(from._internal_offset());
  }
  if (from._internal_linkid() != 0) {
    _internal_set_linkid(from._internal_linkid());
  }
  if (from._internal_parentlinkid() != 0) {
    _internal_set_parentlinkid(from._internal_parentlinkid());
  }
  if (!(from._internal_mass() <= 0 && from._internal_mass() >= 0)) {
    _internal_set_mass(from._internal_mass());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Link::CopyFrom(const Link& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mocap.Link)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Link::IsInitialized() const {
  return true;
}

void Link::InternalSwap(Link* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  linksize_.InternalSwap(&other->linksize_);
  inertialmatrix_.InternalSwap(&other->inertialmatrix_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Link, mass_)
      + sizeof(Link::mass_)
      - PROTOBUF_FIELD_OFFSET(Link, offset_)>(
          reinterpret_cast<char*>(&offset_),
          reinterpret_cast<char*>(&other->offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Link::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_MocapExchange_2eproto_getter, &descriptor_table_MocapExchange_2eproto_once,
      file_level_metadata_MocapExchange_2eproto[4]);
}

// ===================================================================

class JointMeta::_Internal {
 public:
};

JointMeta::JointMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Mocap.JointMeta)
}
JointMeta::JointMeta(const JointMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&jointid_, &from.jointid_,
    static_cast<size_t>(reinterpret_cast<char*>(&linkid_) -
    reinterpret_cast<char*>(&jointid_)) + sizeof(linkid_));
  // @@protoc_insertion_point(copy_constructor:Mocap.JointMeta)
}

inline void JointMeta::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&jointid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&linkid_) -
    reinterpret_cast<char*>(&jointid_)) + sizeof(linkid_));
}

JointMeta::~JointMeta() {
  // @@protoc_insertion_point(destructor:Mocap.JointMeta)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void JointMeta::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void JointMeta::ArenaDtor(void* object) {
  JointMeta* _this = reinterpret_cast< JointMeta* >(object);
  (void)_this;
}
void JointMeta::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JointMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void JointMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:Mocap.JointMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  ::memset(&jointid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&linkid_) -
      reinterpret_cast<char*>(&jointid_)) + sizeof(linkid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JointMeta::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 jointId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          jointid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 linkId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          linkid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Mocap.JointMeta.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JointMeta::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mocap.JointMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 jointId = 1;
  if (this->_internal_jointid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_jointid(), target);
  }

  // uint32 linkId = 2;
  if (this->_internal_linkid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_linkid(), target);
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Mocap.JointMeta.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mocap.JointMeta)
  return target;
}

size_t JointMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mocap.JointMeta)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 3;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 jointId = 1;
  if (this->_internal_jointid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_jointid());
  }

  // uint32 linkId = 2;
  if (this->_internal_linkid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_linkid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JointMeta::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    JointMeta::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JointMeta::GetClassData() const { return &_class_data_; }

void JointMeta::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<JointMeta *>(to)->MergeFrom(
      static_cast<const JointMeta &>(from));
}


void JointMeta::MergeFrom(const JointMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mocap.JointMeta)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_jointid() != 0) {
    _internal_set_jointid(from._internal_jointid());
  }
  if (from._internal_linkid() != 0) {
    _internal_set_linkid(from._internal_linkid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JointMeta::CopyFrom(const JointMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mocap.JointMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JointMeta::IsInitialized() const {
  return true;
}

void JointMeta::InternalSwap(JointMeta* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JointMeta, linkid_)
      + sizeof(JointMeta::linkid_)
      - PROTOBUF_FIELD_OFFSET(JointMeta, jointid_)>(
          reinterpret_cast<char*>(&jointid_),
          reinterpret_cast<char*>(&other->jointid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JointMeta::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_MocapExchange_2eproto_getter, &descriptor_table_MocapExchange_2eproto_once,
      file_level_metadata_MocapExchange_2eproto[5]);
}

// ===================================================================

class Structure::_Internal {
 public:
};

Structure::Structure(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  links_(arena),
  joints_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Mocap.Structure)
}
Structure::Structure(const Structure& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      links_(from.links_),
      joints_(from.joints_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&structureid_, &from.structureid_,
    static_cast<size_t>(reinterpret_cast<char*>(&structuretype_) -
    reinterpret_cast<char*>(&structureid_)) + sizeof(structuretype_));
  // @@protoc_insertion_point(copy_constructor:Mocap.Structure)
}

inline void Structure::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&structureid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&structuretype_) -
    reinterpret_cast<char*>(&structureid_)) + sizeof(structuretype_));
}

Structure::~Structure() {
  // @@protoc_insertion_point(destructor:Mocap.Structure)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Structure::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Structure::ArenaDtor(void* object) {
  Structure* _this = reinterpret_cast< Structure* >(object);
  (void)_this;
}
void Structure::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Structure::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Structure::Clear() {
// @@protoc_insertion_point(message_clear_start:Mocap.Structure)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  links_.Clear();
  joints_.Clear();
  name_.ClearToEmpty();
  ::memset(&structureid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&structuretype_) -
      reinterpret_cast<char*>(&structureid_)) + sizeof(structuretype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Structure::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 structureId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          structureid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Mocap.StructureType structureType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_structuretype(static_cast<::Mocap::StructureType>(val));
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Mocap.Structure.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Mocap.Link links = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_links(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .Mocap.JointMeta joints = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_joints(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Structure::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mocap.Structure)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 structureId = 1;
  if (this->_internal_structureid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_structureid(), target);
  }

  // .Mocap.StructureType structureType = 2;
  if (this->_internal_structuretype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_structuretype(), target);
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Mocap.Structure.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // repeated .Mocap.Link links = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_links_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_links(i), target, stream);
  }

  // repeated .Mocap.JointMeta joints = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_joints_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_joints(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mocap.Structure)
  return target;
}

size_t Structure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mocap.Structure)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Mocap.Link links = 4;
  total_size += 1UL * this->_internal_links_size();
  for (const auto& msg : this->links_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Mocap.JointMeta joints = 5;
  total_size += 1UL * this->_internal_joints_size();
  for (const auto& msg : this->joints_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 structureId = 1;
  if (this->_internal_structureid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_structureid());
  }

  // .Mocap.StructureType structureType = 2;
  if (this->_internal_structuretype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_structuretype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Structure::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Structure::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Structure::GetClassData() const { return &_class_data_; }

void Structure::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Structure *>(to)->MergeFrom(
      static_cast<const Structure &>(from));
}


void Structure::MergeFrom(const Structure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mocap.Structure)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  links_.MergeFrom(from.links_);
  joints_.MergeFrom(from.joints_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_structureid() != 0) {
    _internal_set_structureid(from._internal_structureid());
  }
  if (from._internal_structuretype() != 0) {
    _internal_set_structuretype(from._internal_structuretype());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Structure::CopyFrom(const Structure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mocap.Structure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Structure::IsInitialized() const {
  return true;
}

void Structure::InternalSwap(Structure* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  links_.InternalSwap(&other->links_);
  joints_.InternalSwap(&other->joints_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Structure, structuretype_)
      + sizeof(Structure::structuretype_)
      - PROTOBUF_FIELD_OFFSET(Structure, structureid_)>(
          reinterpret_cast<char*>(&structureid_),
          reinterpret_cast<char*>(&other->structureid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Structure::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_MocapExchange_2eproto_getter, &descriptor_table_MocapExchange_2eproto_once,
      file_level_metadata_MocapExchange_2eproto[6]);
}

// ===================================================================

class Joint::_Internal {
 public:
  static const ::Mocap::Transform& transform(const Joint* msg);
};

const ::Mocap::Transform&
Joint::_Internal::transform(const Joint* msg) {
  return *msg->transform_;
}
Joint::Joint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Mocap.Joint)
}
Joint::Joint(const Joint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_transform()) {
    transform_ = new ::Mocap::Transform(*from.transform_);
  } else {
    transform_ = nullptr;
  }
  jointid_ = from.jointid_;
  // @@protoc_insertion_point(copy_constructor:Mocap.Joint)
}

inline void Joint::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&transform_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&jointid_) -
    reinterpret_cast<char*>(&transform_)) + sizeof(jointid_));
}

Joint::~Joint() {
  // @@protoc_insertion_point(destructor:Mocap.Joint)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Joint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete transform_;
}

void Joint::ArenaDtor(void* object) {
  Joint* _this = reinterpret_cast< Joint* >(object);
  (void)_this;
}
void Joint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Joint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Joint::Clear() {
// @@protoc_insertion_point(message_clear_start:Mocap.Joint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && transform_ != nullptr) {
    delete transform_;
  }
  transform_ = nullptr;
  jointid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Joint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 jointId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          jointid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Mocap.Transform transform = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_transform(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Joint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mocap.Joint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 jointId = 1;
  if (this->_internal_jointid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_jointid(), target);
  }

  // .Mocap.Transform transform = 2;
  if (this->_internal_has_transform()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::transform(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mocap.Joint)
  return target;
}

size_t Joint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mocap.Joint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Mocap.Transform transform = 2;
  if (this->_internal_has_transform()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transform_);
  }

  // uint32 jointId = 1;
  if (this->_internal_jointid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_jointid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Joint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Joint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Joint::GetClassData() const { return &_class_data_; }

void Joint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Joint *>(to)->MergeFrom(
      static_cast<const Joint &>(from));
}


void Joint::MergeFrom(const Joint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mocap.Joint)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_transform()) {
    _internal_mutable_transform()->::Mocap::Transform::MergeFrom(from._internal_transform());
  }
  if (from._internal_jointid() != 0) {
    _internal_set_jointid(from._internal_jointid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Joint::CopyFrom(const Joint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mocap.Joint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Joint::IsInitialized() const {
  return true;
}

void Joint::InternalSwap(Joint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Joint, jointid_)
      + sizeof(Joint::jointid_)
      - PROTOBUF_FIELD_OFFSET(Joint, transform_)>(
          reinterpret_cast<char*>(&transform_),
          reinterpret_cast<char*>(&other->transform_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Joint::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_MocapExchange_2eproto_getter, &descriptor_table_MocapExchange_2eproto_once,
      file_level_metadata_MocapExchange_2eproto[7]);
}

// ===================================================================

class Pose::_Internal {
 public:
};

Pose::Pose(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  joints_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Mocap.Pose)
}
Pose::Pose(const Pose& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      joints_(from.joints_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&subjectid_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(subjectid_));
  // @@protoc_insertion_point(copy_constructor:Mocap.Pose)
}

inline void Pose::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&subjectid_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(subjectid_));
}

Pose::~Pose() {
  // @@protoc_insertion_point(destructor:Mocap.Pose)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Pose::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Pose::ArenaDtor(void* object) {
  Pose* _this = reinterpret_cast< Pose* >(object);
  (void)_this;
}
void Pose::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Pose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Pose::Clear() {
// @@protoc_insertion_point(message_clear_start:Mocap.Pose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  joints_.Clear();
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&subjectid_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(subjectid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pose::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 subjectId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          subjectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Mocap.Joint joints = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_joints(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Pose::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mocap.Pose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 subjectId = 1;
  if (this->_internal_subjectid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_subjectid(), target);
  }

  // uint64 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_timestamp(), target);
  }

  // repeated .Mocap.Joint joints = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_joints_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_joints(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mocap.Pose)
  return target;
}

size_t Pose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mocap.Pose)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Mocap.Joint joints = 3;
  total_size += 1UL * this->_internal_joints_size();
  for (const auto& msg : this->joints_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  // uint32 subjectId = 1;
  if (this->_internal_subjectid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_subjectid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Pose::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Pose::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Pose::GetClassData() const { return &_class_data_; }

void Pose::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Pose *>(to)->MergeFrom(
      static_cast<const Pose &>(from));
}


void Pose::MergeFrom(const Pose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mocap.Pose)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  joints_.MergeFrom(from.joints_);
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_subjectid() != 0) {
    _internal_set_subjectid(from._internal_subjectid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Pose::CopyFrom(const Pose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mocap.Pose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pose::IsInitialized() const {
  return true;
}

void Pose::InternalSwap(Pose* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  joints_.InternalSwap(&other->joints_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pose, subjectid_)
      + sizeof(Pose::subjectid_)
      - PROTOBUF_FIELD_OFFSET(Pose, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Pose::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_MocapExchange_2eproto_getter, &descriptor_table_MocapExchange_2eproto_once,
      file_level_metadata_MocapExchange_2eproto[8]);
}

// ===================================================================

class EnvironmentRequest::_Internal {
 public:
};

EnvironmentRequest::EnvironmentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Mocap.EnvironmentRequest)
}
EnvironmentRequest::EnvironmentRequest(const EnvironmentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Mocap.EnvironmentRequest)
}

inline void EnvironmentRequest::SharedCtor() {
}

EnvironmentRequest::~EnvironmentRequest() {
  // @@protoc_insertion_point(destructor:Mocap.EnvironmentRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EnvironmentRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnvironmentRequest::ArenaDtor(void* object) {
  EnvironmentRequest* _this = reinterpret_cast< EnvironmentRequest* >(object);
  (void)_this;
}
void EnvironmentRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnvironmentRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EnvironmentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Mocap.EnvironmentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnvironmentRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnvironmentRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mocap.EnvironmentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mocap.EnvironmentRequest)
  return target;
}

size_t EnvironmentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mocap.EnvironmentRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EnvironmentRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EnvironmentRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EnvironmentRequest::GetClassData() const { return &_class_data_; }

void EnvironmentRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<EnvironmentRequest *>(to)->MergeFrom(
      static_cast<const EnvironmentRequest &>(from));
}


void EnvironmentRequest::MergeFrom(const EnvironmentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mocap.EnvironmentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EnvironmentRequest::CopyFrom(const EnvironmentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mocap.EnvironmentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnvironmentRequest::IsInitialized() const {
  return true;
}

void EnvironmentRequest::InternalSwap(EnvironmentRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnvironmentRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_MocapExchange_2eproto_getter, &descriptor_table_MocapExchange_2eproto_once,
      file_level_metadata_MocapExchange_2eproto[9]);
}

// ===================================================================

class MocapStreamRequest::_Internal {
 public:
};

MocapStreamRequest::MocapStreamRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Mocap.MocapStreamRequest)
}
MocapStreamRequest::MocapStreamRequest(const MocapStreamRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  fps_ = from.fps_;
  // @@protoc_insertion_point(copy_constructor:Mocap.MocapStreamRequest)
}

inline void MocapStreamRequest::SharedCtor() {
fps_ = 0;
}

MocapStreamRequest::~MocapStreamRequest() {
  // @@protoc_insertion_point(destructor:Mocap.MocapStreamRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MocapStreamRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MocapStreamRequest::ArenaDtor(void* object) {
  MocapStreamRequest* _this = reinterpret_cast< MocapStreamRequest* >(object);
  (void)_this;
}
void MocapStreamRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MocapStreamRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MocapStreamRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Mocap.MocapStreamRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fps_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MocapStreamRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float fps = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          fps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MocapStreamRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mocap.MocapStreamRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float fps = 1;
  if (!(this->_internal_fps() <= 0 && this->_internal_fps() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_fps(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mocap.MocapStreamRequest)
  return target;
}

size_t MocapStreamRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mocap.MocapStreamRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float fps = 1;
  if (!(this->_internal_fps() <= 0 && this->_internal_fps() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MocapStreamRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MocapStreamRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MocapStreamRequest::GetClassData() const { return &_class_data_; }

void MocapStreamRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MocapStreamRequest *>(to)->MergeFrom(
      static_cast<const MocapStreamRequest &>(from));
}


void MocapStreamRequest::MergeFrom(const MocapStreamRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mocap.MocapStreamRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_fps() <= 0 && from._internal_fps() >= 0)) {
    _internal_set_fps(from._internal_fps());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MocapStreamRequest::CopyFrom(const MocapStreamRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mocap.MocapStreamRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MocapStreamRequest::IsInitialized() const {
  return true;
}

void MocapStreamRequest::InternalSwap(MocapStreamRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(fps_, other->fps_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MocapStreamRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_MocapExchange_2eproto_getter, &descriptor_table_MocapExchange_2eproto_once,
      file_level_metadata_MocapExchange_2eproto[10]);
}

// ===================================================================

class MocapStreamResponse::_Internal {
 public:
};

MocapStreamResponse::MocapStreamResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  poses_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Mocap.MocapStreamResponse)
}
MocapStreamResponse::MocapStreamResponse(const MocapStreamResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      poses_(from.poses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  servertime_ = from.servertime_;
  // @@protoc_insertion_point(copy_constructor:Mocap.MocapStreamResponse)
}

inline void MocapStreamResponse::SharedCtor() {
servertime_ = 0;
}

MocapStreamResponse::~MocapStreamResponse() {
  // @@protoc_insertion_point(destructor:Mocap.MocapStreamResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MocapStreamResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MocapStreamResponse::ArenaDtor(void* object) {
  MocapStreamResponse* _this = reinterpret_cast< MocapStreamResponse* >(object);
  (void)_this;
}
void MocapStreamResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MocapStreamResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MocapStreamResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Mocap.MocapStreamResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  poses_.Clear();
  servertime_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MocapStreamResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Mocap.Pose poses = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_poses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // float serverTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          servertime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MocapStreamResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mocap.MocapStreamResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Mocap.Pose poses = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_poses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_poses(i), target, stream);
  }

  // float serverTime = 2;
  if (!(this->_internal_servertime() <= 0 && this->_internal_servertime() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_servertime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mocap.MocapStreamResponse)
  return target;
}

size_t MocapStreamResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mocap.MocapStreamResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Mocap.Pose poses = 1;
  total_size += 1UL * this->_internal_poses_size();
  for (const auto& msg : this->poses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // float serverTime = 2;
  if (!(this->_internal_servertime() <= 0 && this->_internal_servertime() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MocapStreamResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MocapStreamResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MocapStreamResponse::GetClassData() const { return &_class_data_; }

void MocapStreamResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MocapStreamResponse *>(to)->MergeFrom(
      static_cast<const MocapStreamResponse &>(from));
}


void MocapStreamResponse::MergeFrom(const MocapStreamResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mocap.MocapStreamResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  poses_.MergeFrom(from.poses_);
  if (!(from._internal_servertime() <= 0 && from._internal_servertime() >= 0)) {
    _internal_set_servertime(from._internal_servertime());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MocapStreamResponse::CopyFrom(const MocapStreamResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mocap.MocapStreamResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MocapStreamResponse::IsInitialized() const {
  return true;
}

void MocapStreamResponse::InternalSwap(MocapStreamResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  poses_.InternalSwap(&other->poses_);
  swap(servertime_, other->servertime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MocapStreamResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_MocapExchange_2eproto_getter, &descriptor_table_MocapExchange_2eproto_once,
      file_level_metadata_MocapExchange_2eproto[11]);
}

// ===================================================================

class StructureRequest::_Internal {
 public:
};

StructureRequest::StructureRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  structureid_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Mocap.StructureRequest)
}
StructureRequest::StructureRequest(const StructureRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      structureid_(from.structureid_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Mocap.StructureRequest)
}

inline void StructureRequest::SharedCtor() {
}

StructureRequest::~StructureRequest() {
  // @@protoc_insertion_point(destructor:Mocap.StructureRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StructureRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StructureRequest::ArenaDtor(void* object) {
  StructureRequest* _this = reinterpret_cast< StructureRequest* >(object);
  (void)_this;
}
void StructureRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StructureRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StructureRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Mocap.StructureRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  structureid_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StructureRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 structureId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_structureid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_structureid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StructureRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mocap.StructureRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 structureId = 1;
  {
    int byte_size = _structureid_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_structureid(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mocap.StructureRequest)
  return target;
}

size_t StructureRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mocap.StructureRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 structureId = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->structureid_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _structureid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StructureRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StructureRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StructureRequest::GetClassData() const { return &_class_data_; }

void StructureRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<StructureRequest *>(to)->MergeFrom(
      static_cast<const StructureRequest &>(from));
}


void StructureRequest::MergeFrom(const StructureRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mocap.StructureRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  structureid_.MergeFrom(from.structureid_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StructureRequest::CopyFrom(const StructureRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mocap.StructureRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StructureRequest::IsInitialized() const {
  return true;
}

void StructureRequest::InternalSwap(StructureRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  structureid_.InternalSwap(&other->structureid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StructureRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_MocapExchange_2eproto_getter, &descriptor_table_MocapExchange_2eproto_once,
      file_level_metadata_MocapExchange_2eproto[12]);
}

// ===================================================================

class StructureResponse::_Internal {
 public:
};

StructureResponse::StructureResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  structures_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Mocap.StructureResponse)
}
StructureResponse::StructureResponse(const StructureResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      structures_(from.structures_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Mocap.StructureResponse)
}

inline void StructureResponse::SharedCtor() {
}

StructureResponse::~StructureResponse() {
  // @@protoc_insertion_point(destructor:Mocap.StructureResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StructureResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StructureResponse::ArenaDtor(void* object) {
  StructureResponse* _this = reinterpret_cast< StructureResponse* >(object);
  (void)_this;
}
void StructureResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StructureResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StructureResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Mocap.StructureResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  structures_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StructureResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Mocap.Structure structures = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_structures(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StructureResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mocap.StructureResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Mocap.Structure structures = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_structures_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_structures(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mocap.StructureResponse)
  return target;
}

size_t StructureResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mocap.StructureResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Mocap.Structure structures = 1;
  total_size += 1UL * this->_internal_structures_size();
  for (const auto& msg : this->structures_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StructureResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StructureResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StructureResponse::GetClassData() const { return &_class_data_; }

void StructureResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<StructureResponse *>(to)->MergeFrom(
      static_cast<const StructureResponse &>(from));
}


void StructureResponse::MergeFrom(const StructureResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mocap.StructureResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  structures_.MergeFrom(from.structures_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StructureResponse::CopyFrom(const StructureResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mocap.StructureResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StructureResponse::IsInitialized() const {
  return true;
}

void StructureResponse::InternalSwap(StructureResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  structures_.InternalSwap(&other->structures_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StructureResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_MocapExchange_2eproto_getter, &descriptor_table_MocapExchange_2eproto_once,
      file_level_metadata_MocapExchange_2eproto[13]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Mocap
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Mocap::Environment* Arena::CreateMaybeMessage< ::Mocap::Environment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Mocap::Environment >(arena);
}
template<> PROTOBUF_NOINLINE ::Mocap::Translation* Arena::CreateMaybeMessage< ::Mocap::Translation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Mocap::Translation >(arena);
}
template<> PROTOBUF_NOINLINE ::Mocap::Orientation* Arena::CreateMaybeMessage< ::Mocap::Orientation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Mocap::Orientation >(arena);
}
template<> PROTOBUF_NOINLINE ::Mocap::Transform* Arena::CreateMaybeMessage< ::Mocap::Transform >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Mocap::Transform >(arena);
}
template<> PROTOBUF_NOINLINE ::Mocap::Link* Arena::CreateMaybeMessage< ::Mocap::Link >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Mocap::Link >(arena);
}
template<> PROTOBUF_NOINLINE ::Mocap::JointMeta* Arena::CreateMaybeMessage< ::Mocap::JointMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Mocap::JointMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::Mocap::Structure* Arena::CreateMaybeMessage< ::Mocap::Structure >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Mocap::Structure >(arena);
}
template<> PROTOBUF_NOINLINE ::Mocap::Joint* Arena::CreateMaybeMessage< ::Mocap::Joint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Mocap::Joint >(arena);
}
template<> PROTOBUF_NOINLINE ::Mocap::Pose* Arena::CreateMaybeMessage< ::Mocap::Pose >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Mocap::Pose >(arena);
}
template<> PROTOBUF_NOINLINE ::Mocap::EnvironmentRequest* Arena::CreateMaybeMessage< ::Mocap::EnvironmentRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Mocap::EnvironmentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Mocap::MocapStreamRequest* Arena::CreateMaybeMessage< ::Mocap::MocapStreamRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Mocap::MocapStreamRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Mocap::MocapStreamResponse* Arena::CreateMaybeMessage< ::Mocap::MocapStreamResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Mocap::MocapStreamResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::Mocap::StructureRequest* Arena::CreateMaybeMessage< ::Mocap::StructureRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Mocap::StructureRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Mocap::StructureResponse* Arena::CreateMaybeMessage< ::Mocap::StructureResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Mocap::StructureResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
THIRD_PARTY_INCLUDES_START
// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
THIRD_PARTY_INCLUDES_END