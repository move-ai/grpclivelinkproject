// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: MocapExchange.proto
#ifndef GRPC_MocapExchange_2eproto__INCLUDED
#define GRPC_MocapExchange_2eproto__INCLUDED

#include "MocapExchange.pb.h"

#include <functional>
THIRD_PARTY_INCLUDES_START
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>
THIRD_PARTY_INCLUDES_END

namespace Mocap {

class MocapServer final {
 public:
  static constexpr char const* service_full_name() {
    return "Mocap.MocapServer";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetEnvironment(::grpc::ClientContext* context, const ::Mocap::EnvironmentRequest& request, ::Mocap::Environment* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Mocap::Environment>> AsyncGetEnvironment(::grpc::ClientContext* context, const ::Mocap::EnvironmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Mocap::Environment>>(AsyncGetEnvironmentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Mocap::Environment>> PrepareAsyncGetEnvironment(::grpc::ClientContext* context, const ::Mocap::EnvironmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Mocap::Environment>>(PrepareAsyncGetEnvironmentRaw(context, request, cq));
    }
    virtual ::grpc::Status GetStructure(::grpc::ClientContext* context, const ::Mocap::StructureRequest& request, ::Mocap::StructureResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Mocap::StructureResponse>> AsyncGetStructure(::grpc::ClientContext* context, const ::Mocap::StructureRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Mocap::StructureResponse>>(AsyncGetStructureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Mocap::StructureResponse>> PrepareAsyncGetStructure(::grpc::ClientContext* context, const ::Mocap::StructureRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Mocap::StructureResponse>>(PrepareAsyncGetStructureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::Mocap::MocapStreamResponse>> GetMocapStream(::grpc::ClientContext* context, const ::Mocap::MocapStreamRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::Mocap::MocapStreamResponse>>(GetMocapStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::Mocap::MocapStreamResponse>> AsyncGetMocapStream(::grpc::ClientContext* context, const ::Mocap::MocapStreamRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::Mocap::MocapStreamResponse>>(AsyncGetMocapStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::Mocap::MocapStreamResponse>> PrepareAsyncGetMocapStream(::grpc::ClientContext* context, const ::Mocap::MocapStreamRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::Mocap::MocapStreamResponse>>(PrepareAsyncGetMocapStreamRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void GetEnvironment(::grpc::ClientContext* context, const ::Mocap::EnvironmentRequest* request, ::Mocap::Environment* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetEnvironment(::grpc::ClientContext* context, const ::Mocap::EnvironmentRequest* request, ::Mocap::Environment* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetEnvironment(::grpc::ClientContext* context, const ::Mocap::EnvironmentRequest* request, ::Mocap::Environment* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetStructure(::grpc::ClientContext* context, const ::Mocap::StructureRequest* request, ::Mocap::StructureResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetStructure(::grpc::ClientContext* context, const ::Mocap::StructureRequest* request, ::Mocap::StructureResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetStructure(::grpc::ClientContext* context, const ::Mocap::StructureRequest* request, ::Mocap::StructureResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetMocapStream(::grpc::ClientContext* context, const ::Mocap::MocapStreamRequest* request, ::grpc::ClientReadReactor< ::Mocap::MocapStreamResponse>* reactor) = 0;
      #else
      virtual void GetMocapStream(::grpc::ClientContext* context, const ::Mocap::MocapStreamRequest* request, ::grpc::experimental::ClientReadReactor< ::Mocap::MocapStreamResponse>* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Mocap::Environment>* AsyncGetEnvironmentRaw(::grpc::ClientContext* context, const ::Mocap::EnvironmentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Mocap::Environment>* PrepareAsyncGetEnvironmentRaw(::grpc::ClientContext* context, const ::Mocap::EnvironmentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Mocap::StructureResponse>* AsyncGetStructureRaw(::grpc::ClientContext* context, const ::Mocap::StructureRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Mocap::StructureResponse>* PrepareAsyncGetStructureRaw(::grpc::ClientContext* context, const ::Mocap::StructureRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::Mocap::MocapStreamResponse>* GetMocapStreamRaw(::grpc::ClientContext* context, const ::Mocap::MocapStreamRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::Mocap::MocapStreamResponse>* AsyncGetMocapStreamRaw(::grpc::ClientContext* context, const ::Mocap::MocapStreamRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::Mocap::MocapStreamResponse>* PrepareAsyncGetMocapStreamRaw(::grpc::ClientContext* context, const ::Mocap::MocapStreamRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetEnvironment(::grpc::ClientContext* context, const ::Mocap::EnvironmentRequest& request, ::Mocap::Environment* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Mocap::Environment>> AsyncGetEnvironment(::grpc::ClientContext* context, const ::Mocap::EnvironmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Mocap::Environment>>(AsyncGetEnvironmentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Mocap::Environment>> PrepareAsyncGetEnvironment(::grpc::ClientContext* context, const ::Mocap::EnvironmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Mocap::Environment>>(PrepareAsyncGetEnvironmentRaw(context, request, cq));
    }
    ::grpc::Status GetStructure(::grpc::ClientContext* context, const ::Mocap::StructureRequest& request, ::Mocap::StructureResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Mocap::StructureResponse>> AsyncGetStructure(::grpc::ClientContext* context, const ::Mocap::StructureRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Mocap::StructureResponse>>(AsyncGetStructureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Mocap::StructureResponse>> PrepareAsyncGetStructure(::grpc::ClientContext* context, const ::Mocap::StructureRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Mocap::StructureResponse>>(PrepareAsyncGetStructureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::Mocap::MocapStreamResponse>> GetMocapStream(::grpc::ClientContext* context, const ::Mocap::MocapStreamRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::Mocap::MocapStreamResponse>>(GetMocapStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::Mocap::MocapStreamResponse>> AsyncGetMocapStream(::grpc::ClientContext* context, const ::Mocap::MocapStreamRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::Mocap::MocapStreamResponse>>(AsyncGetMocapStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::Mocap::MocapStreamResponse>> PrepareAsyncGetMocapStream(::grpc::ClientContext* context, const ::Mocap::MocapStreamRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::Mocap::MocapStreamResponse>>(PrepareAsyncGetMocapStreamRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void GetEnvironment(::grpc::ClientContext* context, const ::Mocap::EnvironmentRequest* request, ::Mocap::Environment* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetEnvironment(::grpc::ClientContext* context, const ::Mocap::EnvironmentRequest* request, ::Mocap::Environment* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetEnvironment(::grpc::ClientContext* context, const ::Mocap::EnvironmentRequest* request, ::Mocap::Environment* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetStructure(::grpc::ClientContext* context, const ::Mocap::StructureRequest* request, ::Mocap::StructureResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetStructure(::grpc::ClientContext* context, const ::Mocap::StructureRequest* request, ::Mocap::StructureResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetStructure(::grpc::ClientContext* context, const ::Mocap::StructureRequest* request, ::Mocap::StructureResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetMocapStream(::grpc::ClientContext* context, const ::Mocap::MocapStreamRequest* request, ::grpc::ClientReadReactor< ::Mocap::MocapStreamResponse>* reactor) override;
      #else
      void GetMocapStream(::grpc::ClientContext* context, const ::Mocap::MocapStreamRequest* request, ::grpc::experimental::ClientReadReactor< ::Mocap::MocapStreamResponse>* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::Mocap::Environment>* AsyncGetEnvironmentRaw(::grpc::ClientContext* context, const ::Mocap::EnvironmentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Mocap::Environment>* PrepareAsyncGetEnvironmentRaw(::grpc::ClientContext* context, const ::Mocap::EnvironmentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Mocap::StructureResponse>* AsyncGetStructureRaw(::grpc::ClientContext* context, const ::Mocap::StructureRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Mocap::StructureResponse>* PrepareAsyncGetStructureRaw(::grpc::ClientContext* context, const ::Mocap::StructureRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::Mocap::MocapStreamResponse>* GetMocapStreamRaw(::grpc::ClientContext* context, const ::Mocap::MocapStreamRequest& request) override;
    ::grpc::ClientAsyncReader< ::Mocap::MocapStreamResponse>* AsyncGetMocapStreamRaw(::grpc::ClientContext* context, const ::Mocap::MocapStreamRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::Mocap::MocapStreamResponse>* PrepareAsyncGetMocapStreamRaw(::grpc::ClientContext* context, const ::Mocap::MocapStreamRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetEnvironment_;
    const ::grpc::internal::RpcMethod rpcmethod_GetStructure_;
    const ::grpc::internal::RpcMethod rpcmethod_GetMocapStream_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetEnvironment(::grpc::ServerContext* context, const ::Mocap::EnvironmentRequest* request, ::Mocap::Environment* response);
    virtual ::grpc::Status GetStructure(::grpc::ServerContext* context, const ::Mocap::StructureRequest* request, ::Mocap::StructureResponse* response);
    virtual ::grpc::Status GetMocapStream(::grpc::ServerContext* context, const ::Mocap::MocapStreamRequest* request, ::grpc::ServerWriter< ::Mocap::MocapStreamResponse>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetEnvironment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetEnvironment() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetEnvironment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEnvironment(::grpc::ServerContext* /*context*/, const ::Mocap::EnvironmentRequest* /*request*/, ::Mocap::Environment* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetEnvironment(::grpc::ServerContext* context, ::Mocap::EnvironmentRequest* request, ::grpc::ServerAsyncResponseWriter< ::Mocap::Environment>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetStructure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetStructure() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetStructure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStructure(::grpc::ServerContext* /*context*/, const ::Mocap::StructureRequest* /*request*/, ::Mocap::StructureResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetStructure(::grpc::ServerContext* context, ::Mocap::StructureRequest* request, ::grpc::ServerAsyncResponseWriter< ::Mocap::StructureResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMocapStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetMocapStream() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetMocapStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMocapStream(::grpc::ServerContext* /*context*/, const ::Mocap::MocapStreamRequest* /*request*/, ::grpc::ServerWriter< ::Mocap::MocapStreamResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMocapStream(::grpc::ServerContext* context, ::Mocap::MocapStreamRequest* request, ::grpc::ServerAsyncWriter< ::Mocap::MocapStreamResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetEnvironment<WithAsyncMethod_GetStructure<WithAsyncMethod_GetMocapStream<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetEnvironment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetEnvironment() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::Mocap::EnvironmentRequest, ::Mocap::Environment>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Mocap::EnvironmentRequest* request, ::Mocap::Environment* response) { return this->GetEnvironment(context, request, response); }));}
    void SetMessageAllocatorFor_GetEnvironment(
        ::grpc::experimental::MessageAllocator< ::Mocap::EnvironmentRequest, ::Mocap::Environment>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Mocap::EnvironmentRequest, ::Mocap::Environment>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetEnvironment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEnvironment(::grpc::ServerContext* /*context*/, const ::Mocap::EnvironmentRequest* /*request*/, ::Mocap::Environment* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetEnvironment(
      ::grpc::CallbackServerContext* /*context*/, const ::Mocap::EnvironmentRequest* /*request*/, ::Mocap::Environment* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetEnvironment(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Mocap::EnvironmentRequest* /*request*/, ::Mocap::Environment* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetStructure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetStructure() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::Mocap::StructureRequest, ::Mocap::StructureResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Mocap::StructureRequest* request, ::Mocap::StructureResponse* response) { return this->GetStructure(context, request, response); }));}
    void SetMessageAllocatorFor_GetStructure(
        ::grpc::experimental::MessageAllocator< ::Mocap::StructureRequest, ::Mocap::StructureResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Mocap::StructureRequest, ::Mocap::StructureResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetStructure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStructure(::grpc::ServerContext* /*context*/, const ::Mocap::StructureRequest* /*request*/, ::Mocap::StructureResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetStructure(
      ::grpc::CallbackServerContext* /*context*/, const ::Mocap::StructureRequest* /*request*/, ::Mocap::StructureResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetStructure(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Mocap::StructureRequest* /*request*/, ::Mocap::StructureResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetMocapStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetMocapStream() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::Mocap::MocapStreamRequest, ::Mocap::MocapStreamResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Mocap::MocapStreamRequest* request) { return this->GetMocapStream(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_GetMocapStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMocapStream(::grpc::ServerContext* /*context*/, const ::Mocap::MocapStreamRequest* /*request*/, ::grpc::ServerWriter< ::Mocap::MocapStreamResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::Mocap::MocapStreamResponse>* GetMocapStream(
      ::grpc::CallbackServerContext* /*context*/, const ::Mocap::MocapStreamRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::Mocap::MocapStreamResponse>* GetMocapStream(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Mocap::MocapStreamRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_GetEnvironment<ExperimentalWithCallbackMethod_GetStructure<ExperimentalWithCallbackMethod_GetMocapStream<Service > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_GetEnvironment<ExperimentalWithCallbackMethod_GetStructure<ExperimentalWithCallbackMethod_GetMocapStream<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetEnvironment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetEnvironment() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetEnvironment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEnvironment(::grpc::ServerContext* /*context*/, const ::Mocap::EnvironmentRequest* /*request*/, ::Mocap::Environment* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetStructure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetStructure() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetStructure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStructure(::grpc::ServerContext* /*context*/, const ::Mocap::StructureRequest* /*request*/, ::Mocap::StructureResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetMocapStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetMocapStream() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetMocapStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMocapStream(::grpc::ServerContext* /*context*/, const ::Mocap::MocapStreamRequest* /*request*/, ::grpc::ServerWriter< ::Mocap::MocapStreamResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetEnvironment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetEnvironment() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetEnvironment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEnvironment(::grpc::ServerContext* /*context*/, const ::Mocap::EnvironmentRequest* /*request*/, ::Mocap::Environment* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetEnvironment(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetStructure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetStructure() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetStructure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStructure(::grpc::ServerContext* /*context*/, const ::Mocap::StructureRequest* /*request*/, ::Mocap::StructureResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetStructure(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetMocapStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetMocapStream() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetMocapStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMocapStream(::grpc::ServerContext* /*context*/, const ::Mocap::MocapStreamRequest* /*request*/, ::grpc::ServerWriter< ::Mocap::MocapStreamResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMocapStream(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetEnvironment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetEnvironment() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetEnvironment(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetEnvironment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEnvironment(::grpc::ServerContext* /*context*/, const ::Mocap::EnvironmentRequest* /*request*/, ::Mocap::Environment* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetEnvironment(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetEnvironment(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetStructure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetStructure() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetStructure(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetStructure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStructure(::grpc::ServerContext* /*context*/, const ::Mocap::StructureRequest* /*request*/, ::Mocap::StructureResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetStructure(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetStructure(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetMocapStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetMocapStream() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->GetMocapStream(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetMocapStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMocapStream(::grpc::ServerContext* /*context*/, const ::Mocap::MocapStreamRequest* /*request*/, ::grpc::ServerWriter< ::Mocap::MocapStreamResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetMocapStream(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* GetMocapStream(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetEnvironment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetEnvironment() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Mocap::EnvironmentRequest, ::Mocap::Environment>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Mocap::EnvironmentRequest, ::Mocap::Environment>* streamer) {
                       return this->StreamedGetEnvironment(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetEnvironment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetEnvironment(::grpc::ServerContext* /*context*/, const ::Mocap::EnvironmentRequest* /*request*/, ::Mocap::Environment* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetEnvironment(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Mocap::EnvironmentRequest,::Mocap::Environment>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetStructure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetStructure() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Mocap::StructureRequest, ::Mocap::StructureResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Mocap::StructureRequest, ::Mocap::StructureResponse>* streamer) {
                       return this->StreamedGetStructure(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetStructure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetStructure(::grpc::ServerContext* /*context*/, const ::Mocap::StructureRequest* /*request*/, ::Mocap::StructureResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetStructure(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Mocap::StructureRequest,::Mocap::StructureResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetEnvironment<WithStreamedUnaryMethod_GetStructure<Service > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_GetMocapStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetMocapStream() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::Mocap::MocapStreamRequest, ::Mocap::MocapStreamResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::Mocap::MocapStreamRequest, ::Mocap::MocapStreamResponse>* streamer) {
                       return this->StreamedGetMocapStream(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetMocapStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetMocapStream(::grpc::ServerContext* /*context*/, const ::Mocap::MocapStreamRequest* /*request*/, ::grpc::ServerWriter< ::Mocap::MocapStreamResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetMocapStream(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::Mocap::MocapStreamRequest,::Mocap::MocapStreamResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_GetMocapStream<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetEnvironment<WithStreamedUnaryMethod_GetStructure<WithSplitStreamingMethod_GetMocapStream<Service > > > StreamedService;
};

}  // namespace Mocap


#endif  // GRPC_MocapExchange_2eproto__INCLUDED
